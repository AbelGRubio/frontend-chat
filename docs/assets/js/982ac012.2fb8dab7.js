"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[59],{8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}},9631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/README","title":"README","description":"react v1.0.18","source":"@site/docs/api/README.md","sourceDirName":"api","slug":"/api/","permalink":"/frontend-chat/docs/docs/api/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Full Stack Project Intro","permalink":"/frontend-chat/docs/docs/intro"},"next":{"title":"README","permalink":"/frontend-chat/docs/docs/api/components/SideBar/"}}');var r=t(4848),i=t(8453);const c={},o=void 0,a={},d=[{value:"Features",id:"features",level:2},{value:"Technologies",id:"technologies",level:2},{value:"Project structure",id:"project-structure",level:2},{value:"Setup",id:"setup",level:2},{value:"Environment config",id:"environment-config",level:2},{value:"Docker",id:"docker",level:2},{value:"Backend integration",id:"backend-integration",level:2},{value:"License",id:"license",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"react v1.0.18"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"frontend---distributed-messaging-system",children:"Frontend - Distributed Messaging System"}),"\n",(0,r.jsxs)(n.p,{children:["This is the frontend application for a distributed messaging backend system.",(0,r.jsx)(n.br,{}),"\n","It connects to a Python-based backend which uses a database and RabbitMQ to ensure high availability and real-time communication."]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ud83d\udd10 User authentication and management"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udcac Sending and receiving messages"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udcc2 File uploads"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udce1 Real-time updates (WebSocket)"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udcf1 Responsive user interface"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"technologies",children:"Technologies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Framework: Angular / React / Vue (\u2190 adjust as needed)"}),"\n",(0,r.jsx)(n.li,{children:"Communication: REST API + WebSocket"}),"\n",(0,r.jsx)(n.li,{children:"State Management: [e.g. RxJS / Redux]"}),"\n",(0,r.jsx)(n.li,{children:"Styling: [Bootstrap / Tailwind / custom CSS]"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 components/       # Reusable UI components\n\u251c\u2500\u2500 pages/            # Views for each route\n\u251c\u2500\u2500 services/         # API calls and WebSocket logic\n\u251c\u2500\u2500 models/           # TypeScript interfaces\n\u251c\u2500\u2500 assets/           # Static files\n\u2514\u2500\u2500 environments/     # Environment-specific configs\n"})}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install\nnpm run dev\n"})}),"\n",(0,r.jsx)(n.h2,{id:"environment-config",children:"Environment config"}),"\n",(0,r.jsx)(n.p,{children:"Configure the backend API URL and WebSocket endpoint in:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src/environments/environment.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8000/api',\n  wsUrl: 'ws://localhost:8000/ws'\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"docker",children:"Docker"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Frontend docker: ",(0,r.jsx)(n.a,{href:"https://hub.docker.com/repository/docker/agrubio/frontend-chat/general",children:"Frontend chat docker"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"backend-integration",children:"Backend integration"}),"\n",(0,r.jsxs)(n.p,{children:["The backend is a Python-based system that stores messages and ensures redundancy via RabbitMQ message queues.",(0,r.jsx)(n.br,{}),"\n","Make sure the backend is running and accessible from this frontend."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Backend repo: ",(0,r.jsx)(n.a,{href:"https://github.com/AbelGRubio/backend-chat",children:"github.com/AbelGRubio/frontend-chat"}),"\nBackend docker: ",(0,r.jsx)(n.a,{href:"https://hub.docker.com/repository/docker/agrubio/backend-chat/general",children:"Backend chat docker"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsx)(n.p,{children:"MIT"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);